#!/bin/bash
# üöÄ LetsCloud MCP Server - Script de Deploy Automatizado (Root Version)
# Este script automatiza a instala√ß√£o completa do servidor na VM como root

set -e  # Exit on any error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          LetsCloud MCP Server Deploy (Root)             ‚ïë
‚ïë             Script de Instala√ß√£o como Root               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar se est√° rodando como root
if [[ $EUID -ne 0 ]]; then
    error "‚ùå Este script deve ser executado como root (sudo ./deploy_pt.sh)"
fi

log "üîß Executando deploy como root..."

# Definir diret√≥rios de trabalho
WORK_DIR="/opt/letscloud-mcp"
ENV_FILE="$WORK_DIR/.env"
PROJECT_DIR="$WORK_DIR/letscloud-mcp-server"

log "üìÅ Diret√≥rio de trabalho: $WORK_DIR"

# Criar diret√≥rios necess√°rios
mkdir -p "$WORK_DIR"/{logs,scripts,backups}

# Fun√ß√£o para solicitar input do usu√°rio
get_input() {
    local prompt="$1"
    local var_name="$2"
    local default="$3"
    local allow_empty="$4"  # Novo par√¢metro para permitir vazio
    
    if [[ -n "$default" ]]; then
        read -p "$prompt [$default]: " input
        if [[ -z "$input" ]]; then
            input="$default"
        fi
    else
        read -p "$prompt: " input
        # Se allow_empty for "true", n√£o for√ßar input
        if [[ "$allow_empty" != "true" ]]; then
            while [[ -z "$input" ]]; do
                read -p "$prompt (obrigat√≥rio): " input
            done
        fi
    fi
    
    eval "$var_name='$input'"
}

# FOR√áA configura√ß√£o se as vari√°veis n√£o est√£o v√°lidas
NEED_CONFIG=false

# Verificar se precisamos de configura√ß√£o
if [[ -z "$LETSCLOUD_API_TOKEN" || "$LETSCLOUD_API_TOKEN" == "echo"* ]]; then
    NEED_CONFIG=true
fi

if [[ -z "$MCP_API_KEY" || "$MCP_API_KEY" == "log"* || "$MCP_API_KEY" == "ERROR"* ]]; then
    NEED_CONFIG=true  
fi

if [[ "$NEED_CONFIG" == "true" ]]; then
    log "üìã Configura√ß√£o necess√°ria (vari√°veis n√£o definidas)..."
    echo

    # Limpar vari√°veis corrompidas
    unset LETSCLOUD_API_TOKEN MCP_API_KEY SERVER_PORT DOMAIN

    get_input "üîë Token da API LetsCloud" "LETSCLOUD_API_TOKEN"
    get_input "üîê Chave da API HTTP (deixe vazio para gerar)" "MCP_API_KEY" "" "true"
    get_input "üåê Porta do servidor" "SERVER_PORT" "8000"
    get_input "üè† Dom√≠nio (opcional, deixe vazio para usar IP)" "DOMAIN" "" "true"

    # Gerar chave API se n√£o fornecida
    if [[ -z "$MCP_API_KEY" ]]; then
        MCP_API_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))" 2>/dev/null || openssl rand -base64 32)
        log "üîê Chave API gerada automaticamente: $MCP_API_KEY"
    fi
    
    log "‚úÖ Configura√ß√£o conclu√≠da!"
    log "üîë Token: ${LETSCLOUD_API_TOKEN:0:15}..."
    log "üîê API Key: ${MCP_API_KEY:0:15}..."
else
    log "üìã Usando configura√ß√µes v√°lidas existentes..."
    log "üîë Token: ${LETSCLOUD_API_TOKEN:0:15}..."
    log "üîê API Key: ${MCP_API_KEY:0:15}..."
    log "üåê Porta: $SERVER_PORT"
    log "üè† Dom√≠nio: ${DOMAIN:-"(IP autom√°tico)"}"
fi

echo
log "üöÄ Iniciando instala√ß√£o..."

# Atualizar sistema
log "üì¶ Atualizando sistema..."
apt update && apt upgrade -y

# Instalar depend√™ncias b√°sicas
log "üîß Instalando depend√™ncias..."

# Auto-detectar vers√£o do Python
PYTHON_VERSION=$(python3 --version 2>&1 | grep -oP '3\.\d+' | head -1)
if [[ -z "$PYTHON_VERSION" ]]; then
    PYTHON_VERSION="3.10"  # Fallback
fi
log "üêç Python $PYTHON_VERSION detectado"

apt install -y \
    python3 \
    python3-pip \
    python3-venv \
    python3-dev \
    git \
    nginx \
    certbot \
    python3-certbot-nginx \
    htop \
    curl \
    wget \
    unzip \
    ufw \
    fail2ban

# Clonar ou atualizar reposit√≥rio
if [[ -d "$PROJECT_DIR" ]]; then
    log "üîÑ Atualizando reposit√≥rio existente..."
    git -C "$PROJECT_DIR" pull
else
    log "üì• Clonando reposit√≥rio..."
    git clone https://github.com/letscloud-community/letscloud-mcp-server.git "$PROJECT_DIR"
fi

# Configurar ambiente Python
log "üêç Configurando ambiente Python..."
cd "$PROJECT_DIR"

# Criar ambiente virtual
if [[ ! -d "venv" ]]; then
    python3 -m venv venv
fi

# Ativar venv e instalar depend√™ncias
source venv/bin/activate
pip install --upgrade pip

# Instalar depend√™ncias
if [[ -f "requirements.txt" ]]; then
    pip install -r requirements.txt
else
    # Depend√™ncias principais se requirements.txt n√£o existir
    pip install fastapi uvicorn python-dotenv httpx pydantic
fi

# Debug: verificar vari√°veis antes de salvar
# Valida√ß√£o final antes de salvar
if [[ -z "$LETSCLOUD_API_TOKEN" || "$LETSCLOUD_API_TOKEN" == "echo"* ]]; then
    error "‚ùå Token da API LetsCloud inv√°lido ou n√£o definido!"
    exit 1
fi

if [[ -z "$MCP_API_KEY" || "$MCP_API_KEY" == "log"* || "$MCP_API_KEY" == "ERROR"* ]]; then
    error "‚ùå Chave API HTTP inv√°lida ou n√£o definida!"
    exit 1  
fi

log "üîç Verificando configura√ß√µes antes de salvar:"
log "   Token: ${LETSCLOUD_API_TOKEN:0:15}... (${#LETSCLOUD_API_TOKEN} chars)"
log "   API Key: ${MCP_API_KEY:0:15}... (${#MCP_API_KEY} chars)"
log "   Porta: $SERVER_PORT"

log "‚öôÔ∏è Criando arquivo de configura√ß√£o..."

# Criar arquivo .env
cat > "$ENV_FILE" << EOF
LETSCLOUD_API_TOKEN=$LETSCLOUD_API_TOKEN
MCP_API_KEY=$MCP_API_KEY
SERVER_PORT=$SERVER_PORT
DEBUG=false
EOF

log "‚úÖ Arquivo de configura√ß√£o criado em $ENV_FILE"

# Configurar servi√ßo systemd
log "üîß Configurando servi√ßo systemd..."

# Obter IP p√∫blico
PUBLIC_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || echo "localhost")

cat > /etc/systemd/system/letscloud-mcp.service << EOF
[Unit]
Description=LetsCloud MCP Server
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$PROJECT_DIR/src
Environment=PATH=$PROJECT_DIR/venv/bin
Environment=PYTHONPATH=$PROJECT_DIR/src
ExecStart=$PROJECT_DIR/venv/bin/python -m uvicorn letscloud_mcp_server.server:app --host 0.0.0.0 --port $SERVER_PORT
Restart=always
RestartSec=10
EnvironmentFile=$ENV_FILE

# Security settings
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=$WORK_DIR

[Install]
WantedBy=multi-user.target
EOF

# Recarregar systemd e iniciar servi√ßo
systemctl daemon-reload
systemctl enable letscloud-mcp
systemctl start letscloud-mcp

# Aguardar servi√ßo iniciar
sleep 3

# Verificar status
if systemctl is-active --quiet letscloud-mcp; then
    log "‚úÖ Servi√ßo iniciado com sucesso!"
else
    warn "‚ö†Ô∏è Servi√ßo pode n√£o ter iniciado corretamente. Verificando logs..."
    journalctl -u letscloud-mcp --no-pager -n 10
fi

# Configurar firewall
log "üî• Configurando firewall..."
ufw --force enable
ufw allow ssh
ufw allow $SERVER_PORT/tcp

# Limpeza
log "üßπ Limpeza final..."
rm -f /tmp/mcp_config.env /tmp/deploy_as_user.sh

# Obter URL final
if [[ -n "$DOMAIN" ]]; then
    BASE_URL="http://$DOMAIN:$SERVER_PORT"
else
    BASE_URL="http://$PUBLIC_IP:$SERVER_PORT"
fi

echo
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚úÖ DEPLOY CONCLU√çDO! ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

log "üìã Informa√ß√µes do servidor:"
echo -e " üåê URL: $BASE_URL"
echo -e " üîë Chave API: $MCP_API_KEY"
echo -e " üìä Health Check: $BASE_URL/health"
echo -e " üìö Documenta√ß√£o: $BASE_URL/docs"

echo
log "üìã Comandos √∫teis:"
echo -e " Status: systemctl status letscloud-mcp"
echo -e " Logs: journalctl -u letscloud-mcp -f"
echo -e " Restart: systemctl restart letscloud-mcp"

echo
log "üéâ Servidor pronto para uso!"

echo
warn "‚ö†Ô∏è Salve a API Key: $MCP_API_KEY"
warn "‚ö†Ô∏è Configure seu cliente para usar: $BASE_URL"

# Teste de conectividade
log "üîç Testando conectividade..."
if curl -f -s "$BASE_URL/health" >/dev/null; then
    log "‚úÖ Health check OK!"
else
    warn "‚ö†Ô∏è Health check falhou. Verifique os logs: journalctl -u letscloud-mcp -f"
fi 